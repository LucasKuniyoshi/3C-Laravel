API - Laravel

https://candied-gooseberry-205.notion.site/Criando-API-REST-com-Laravel-9-606573f493e9494b9b7abc7ac1298828

composer create-project laravel/laravel example-app(biblia)
php artisan migrate (pega as sessões e outros recursos a partir das migrações)
php artisan serve (roda o servidor local, TEM Q SER NA PASTA DO PROJETO)

===========================
BD:
Create database biblia
utf8mb4
utf8mb4_general_ci
===========================

php artisan make:model Testamento --migration (CRIA UMA NOVA MODEL "TESTAMENTO")

php artisan migrate (NO Q A ESTRUTURA DAS TABELAS SÃO CRIADAS AQUI, ESSE COMANDO ENVIA SUAS DEFINIÇÕES PARA O BANCO SQLyog) 

php artisan make:controller TestamentoController --api (CRIA A CONTROLER TestamentoController NA API)

FRAMEWORK - estrutura de código pronto, q vc pode trabalhar em cima dela
============================
NO INSOMNIA:

MANAGER ENVIRONMENT
{
	"base_url": "http://127.0.0.1:8000/"
}

========================================
***************************************
========================================
NO PROJETO LARAVEL-10: (curso do youtube)

Abrir o docker desktop
rodar na linha de comendo do projeto:
docker-compose up -d
docker-compose exec app bash

composer install
php artisan key:generate (CRIA AS CHAVES DE CRIPTOGRAFIA NO .ENV, TOKENS)

php artisan make:request StoreUpdateSupportRequest (CRIA UM CONTROLLER PARA TER TODAS AS SUAS VALIDAÇÕES CENTRALIZADAS, "n precisa mais usar Request $request")

php artisan make:component --help
php artisan make:component Alert --view => cria 

C:\xampp\htdocs\curso_php\API_Laravel\laravel-10>rm -rf .git
rm -rf .git => PERMITE Q OS DADOS DO BANCO N SEJAM PERDIDOS AO DESLIGAR OU REINICIAR A MÁQUINA

docker ps - VÊ TODOS AS APLICAÇÕES Q ESTÃO RODANDO EM DOCKER

=====================================
bootstrap - da o start na aplicação em si

php artisan make:controller Admin\\SupportController (cria a controller SupportController na pasta Admin)

php artisan make:model Support -mc ("-m" já cria o arquivo de migration, "c" cria a controller)

php artisan migrate => atualiza as tabelas criadas

=======================================
NO HTML (blade);
@csrf() => gera um token pra cada submit realizado, "seguranca";

<table>
	<thead> "head da tabela"
	<tbody> "body da tabela

	<tbody>
		@foreach($supports as $support) //loop q vai ler todos os dados do banco
		<tr> // "row" da tabela
			<td>{{$support->subject}}</td> //td => dado da linha
			<td>{{$support->status}}</td>
			<td>{{$support->body}}</td>
		</tr>
	</tbody>
</table>

<?=blablabla?> (PopUp Altert)

Console.log($id) = dd($id) "cout"

<text>{{ $support->body ?? old('body') }}</text // old('body') => mantem o q foi escrito no input, mesmo q de erro

DTO => especifica o tipo de dado especificado, melhora a comunicação entre Request e Response com o banco

VIEWS => FORM.BLADE.PHP
<input value="{{ $support->subject ?? old('subject') }}>
{{-- value="{{ $support->subject ?? old('subject') }}" No input, se já tiver dados cadastrados retorna eles (edit); se n retorna nada e mantém o q o usuário estava escrevendo (create) --}}

São intermediadores, responsáveis por interligar as ações executadas na view e concilia-las com os dados presentes na model. Normalmente é aqui que as principais funções da aplicação se localizam, pegando os dados da model e manipulando-os a sua maneira. 